kind: Pod
apiVersion: v1
metadata:
  namespace: {{NAMESPACE}}
  name: {{POD_NAME}}
  labels:
    app: {{POD_NAME}}
    interpreterGroupId: {{INTP_ID}}
    interpreterSettingName: {{INTP_SETTING}}
  {% if OWNER_UID is defined and OWNER_UID %}
  ownerReferences:
  - apiVersion: v1
    controller: false
    blockOwnerDeletion: false
    kind: Pod
    name: {{OWNER_NAME}}
    uid: {{OWNER_UID}}
  {% endif %}
spec:
  {% if SPARK_IMAGE is defined %}
  automountServiceAccountToken: true
  {% else %}
  automountServiceAccountToken: false
  {% endif %}
  restartPolicy: Never
  terminationGracePeriodSeconds: 10
  containers:
  - name: {{CONTAINER_NAME}}
    image: {{CONTAINER_IMAGE}}
    command: ["sh", "-c", "$(ZEPPELIN_HOME)/bin/interpreter.sh -d $(ZEPPELIN_HOME)/interpreter/{{INTP_NAME}} -r {{INTP_PORT}}:{{INTP_PORT}} -c {{CALLBACK_HOST}} -p {{CALLBACK_PORT}} -i {{INTP_ID}} -l {{INTP_REPO}} -g {{INTP_SETTING}}"]
    env:
    - name: ZEPPELIN_HOME
      value: /zeppelin
  {% if SPARK_IMAGE is defined %}
    - name: SPARK_HOME
      value: /spark
    - name: SPARK_SUBMIT_OPTIONS
      value: {{SPARK_SUBMIT_OPTIONS}}
    volumeMounts:
    - name: spark-home
      mountPath: /spark
  initContainers:
  - name: spark-home-init
    image: {{SPARK_IMAGE}}
    command: ["sh", "-c", "cp -r /opt/spark/* /spark/"]
    volumeMounts:
    - name: spark-home
      mountPath: /spark
  volumes:
  - name: spark-home
    emptyDir: {}
  {% endif %}
---
kind: Service
apiVersion: v1
metadata:
  namespace: {{NAMESPACE}}
  name: {{POD_NAME}}             # keep Service name the same to Pod name.
  {% if OWNER_UID is defined and OWNER_UID %}
  ownerReferences:
  - apiVersion: v1
    controller: false
    blockOwnerDeletion: false
    kind: Pod
    name: {{OWNER_NAME}}
    uid: {{OWNER_UID}}
  {% endif %}
spec:
  clusterIP: None
  ports:
    - name: intp
      port: 12321
    {% if SPARK_IMAGE is defined %}
    - name: spark-driver
      port: 22321
    - name: spark-blockmanager
      port: 22322
    {% endif %}
  selector:
    app: {{POD_NAME}}

{% if SPARK_IMAGE is defined %}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{POD_NAME}}
  namespace: {{NAMESPACE}}
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["create", "get", "update", "list", "delete", "watch" ]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{POD_NAME}}
subjects:
- kind: ServiceAccount
  name: default
roleRef:
  kind: Role
  name: {{POD_NAME}}
  apiGroup: rbac.authorization.k8s.io
{% endif %}